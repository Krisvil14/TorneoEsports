"""empty message

Revision ID: 5bb4c6f0261f
Revises: 
Create Date: 2025-05-24 17:27:24.913177

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '5bb4c6f0261f'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('tournament',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('name', sa.String(length=120), nullable=False),
    sa.Column('date_start', sa.String(length=50), nullable=False),
    sa.Column('num_max_teams', sa.Integer(), nullable=False),
    sa.Column('game', postgresql.ENUM('league_of_legends', 'valorant', name='gameenum'), nullable=False),
    sa.Column('cost', sa.Integer(), nullable=False),
    sa.CheckConstraint('num_max_teams >= 5 AND num_max_teams <= 10', name='num_max_teams_check'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_table('team',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=80), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('max_players', sa.Integer(), nullable=False),
    sa.Column('game', postgresql.ENUM('league_of_legends', 'valorant', name='gameenum'), nullable=False),
    sa.Column('tournament_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('balance', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['tournament_id'], ['tournament.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('match',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('tournament_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('team1_id', sa.Integer(), nullable=False),
    sa.Column('team2_id', sa.Integer(), nullable=False),
    sa.Column('score1', sa.Integer(), nullable=True),
    sa.Column('score2', sa.Integer(), nullable=True),
    sa.Column('next_match_id', sa.Integer(), nullable=False),
    sa.CheckConstraint('score1 >= 0', name='check_score1_positive'),
    sa.CheckConstraint('score2 >= 0', name='check_score2_positive'),
    sa.ForeignKeyConstraint(['next_match_id'], ['match.id'], ),
    sa.ForeignKeyConstraint(['team1_id'], ['team.id'], ),
    sa.ForeignKeyConstraint(['team2_id'], ['team.id'], ),
    sa.ForeignKeyConstraint(['tournament_id'], ['tournament.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('team__stats',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('team_id', sa.Integer(), nullable=False),
    sa.Column('games_win', sa.Integer(), nullable=False),
    sa.Column('games_lose', sa.Integer(), nullable=False),
    sa.Column('games_count', sa.Integer(), nullable=False),
    sa.Column('tournament_win', sa.Integer(), nullable=False),
    sa.Column('tournament_loses', sa.Integer(), nullable=False),
    sa.Column('tournament_count', sa.Integer(), nullable=False),
    sa.Column('total_kills', sa.Integer(), nullable=False),
    sa.Column('total_assists', sa.Integer(), nullable=False),
    sa.Column('total_deaths', sa.Integer(), nullable=False),
    sa.Column('team_kda', sa.Float(), nullable=False),
    sa.CheckConstraint('games_count >= 0', name='check_games_count_positive'),
    sa.CheckConstraint('games_lose >= 0', name='check_games_lose_positive'),
    sa.CheckConstraint('games_win >= 0', name='check_games_win_positive'),
    sa.CheckConstraint('total_assists >= 0', name='check_total_assists_positive'),
    sa.CheckConstraint('total_deaths >= 0', name='check_total_deaths_positive'),
    sa.CheckConstraint('total_kills >= 0', name='check_total_kills_positive'),
    sa.CheckConstraint('tournament_count >= 0', name='check_tournament_count_positive'),
    sa.CheckConstraint('tournament_loses >= 0', name='check_tournament_loses_positive'),
    sa.CheckConstraint('tournament_win >= 0', name='check_tournament_win_positive'),
    sa.ForeignKeyConstraint(['team_id'], ['team.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('first_name', sa.String(length=50), nullable=False),
    sa.Column('last_name', sa.String(length=50), nullable=False),
    sa.Column('cedula', sa.String(length=20), nullable=False),
    sa.Column('age', sa.Integer(), nullable=False),
    sa.Column('email', sa.String(length=120), nullable=False),
    sa.Column('password', sa.String(length=80), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_leader', sa.Boolean(), nullable=False),
    sa.Column('is_in_team', sa.Boolean(), nullable=False),
    sa.Column('team_id', sa.Integer(), nullable=True),
    sa.Column('role', postgresql.ENUM('user', 'admin', name='roleenum'), nullable=False),
    sa.Column('email_verified', sa.Boolean(), nullable=False),
    sa.Column('otp_code', sa.String(length=6), nullable=True),
    sa.Column('otp_expires', sa.DateTime(timezone=True), nullable=True),
    sa.CheckConstraint("cedula ~ '^[0-9]+$'", name='check_cedula_numeric'),
    sa.CheckConstraint('age > 0', name='check_age_positive'),
    sa.ForeignKeyConstraint(['team_id'], ['team.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('cedula'),
    sa.UniqueConstraint('email')
    )
    op.create_table('application',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('payment', sa.String(length=120), nullable=True),
    sa.Column('action', postgresql.ENUM('join_team', 'join_tournament', 'do_payment', 'receive_payment', name='actionenum'), nullable=False),
    sa.Column('status', postgresql.ENUM('pending', 'approved', 'rejected', name='statusenum'), nullable=False),
    sa.Column('active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('userID', sa.Integer(), nullable=True),
    sa.Column('teamID', sa.Integer(), nullable=True),
    sa.Column('tournamentID', postgresql.UUID(as_uuid=True), nullable=True),
    sa.ForeignKeyConstraint(['teamID'], ['team.id'], ),
    sa.ForeignKeyConstraint(['tournamentID'], ['tournament.id'], ),
    sa.ForeignKeyConstraint(['userID'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('calendar',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('match_id', sa.Integer(), nullable=False),
    sa.Column('scheduled_date', sa.DateTime(), nullable=False),
    sa.Column('is_confirmed', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['match_id'], ['match.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user__stats',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('team_id', sa.Integer(), nullable=True),
    sa.Column('kills', sa.Integer(), nullable=False),
    sa.Column('assists', sa.Integer(), nullable=False),
    sa.Column('deaths', sa.Integer(), nullable=False),
    sa.Column('kda', sa.Float(), nullable=False),
    sa.CheckConstraint('assists >= 0', name='check_assists_positive'),
    sa.CheckConstraint('deaths >= 0', name='check_deaths_positive'),
    sa.CheckConstraint('kills >= 0', name='check_kills_positive'),
    sa.ForeignKeyConstraint(['team_id'], ['team.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('payment',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('application_id', sa.Integer(), nullable=False),
    sa.Column('type', postgresql.ENUM('incoming', 'outgoing', name='paymenttypeenum'), nullable=False),
    sa.Column('amount', sa.Integer(), nullable=False),
    sa.Column('bank', postgresql.ENUM('banco_de_venezuela', 'mercantil', 'banesco', 'provincial', 'bnc', 'banco_plaza', 'banco_exterior', 'bancaribe', name='bankenum'), nullable=False),
    sa.Column('date', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('reference', sa.String(length=50), nullable=False),
    sa.Column('cedula', sa.String(length=20), nullable=False),
    sa.Column('phone_number', sa.String(length=20), nullable=False),
    sa.CheckConstraint("cedula ~ '^[0-9]+$'", name='check_payment_cedula_numeric'),
    sa.CheckConstraint("phone_number ~ '^[0-9]+$'", name='check_phone_numeric'),
    sa.CheckConstraint("reference ~ '^[0-9]+$'", name='check_reference_numeric'),
    sa.CheckConstraint('amount > 0', name='check_amount_positive'),
    sa.ForeignKeyConstraint(['application_id'], ['application.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('payment')
    op.drop_table('user__stats')
    op.drop_table('calendar')
    op.drop_table('application')
    op.drop_table('user')
    op.drop_table('team__stats')
    op.drop_table('match')
    op.drop_table('team')
    op.drop_table('tournament')
    # ### end Alembic commands ###
